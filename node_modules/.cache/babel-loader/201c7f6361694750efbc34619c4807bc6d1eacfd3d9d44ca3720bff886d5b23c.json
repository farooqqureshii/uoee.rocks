{"ast":null,"code":"var _jsxFileName = \"C:\\\\flowchart\\\\src\\\\components\\\\Flowchart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport { courses, getPrerequisites, getCorequisites } from '../data/courses.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Flowchart = ({\n  selectedCourse,\n  onCourseClick\n}) => {\n  _s();\n  const svgRef = useRef(null);\n  const [hoveredCourse, setHoveredCourse] = useState(null);\n  const [connections, setConnections] = useState([]);\n\n  // Generate connections for the hovered course\n  useEffect(() => {\n    if (!hoveredCourse) {\n      setConnections([]);\n      return;\n    }\n    const newConnections = [];\n\n    // Add prerequisite connections\n    const prereqs = getPrerequisites(hoveredCourse);\n    prereqs.forEach(prereq => {\n      newConnections.push({\n        from: prereq.id,\n        to: hoveredCourse.id,\n        type: 'prerequisite'\n      });\n    });\n\n    // Add corequisite connections\n    const coreqs = getCorequisites(hoveredCourse);\n    coreqs.forEach(coreq => {\n      newConnections.push({\n        from: coreq.id,\n        to: hoveredCourse.id,\n        type: 'corequisite'\n      });\n    });\n    setConnections(newConnections);\n  }, [hoveredCourse]);\n\n  // Get all courses organized by year and semester\n  const getCoursesByYearAndSemester = () => {\n    const organized = {};\n    courses.forEach(course => {\n      const key = `Year ${course.year} ${course.semester}`;\n      if (!organized[key]) {\n        organized[key] = [];\n      }\n      organized[key].push(course);\n    });\n\n    // Sort by year and semester\n    return Object.entries(organized).sort(([a], [b]) => {\n      const yearA = parseInt(a.split(' ')[1]);\n      const yearB = parseInt(b.split(' ')[1]);\n      if (yearA !== yearB) return yearA - yearB;\n      return a.includes('Fall') ? -1 : 1;\n    });\n  };\n  const semesterData = getCoursesByYearAndSemester();\n  const totalColumns = semesterData.length;\n  const columnWidth = 280; // Increased from 200\n  const cardHeight = 120; // Increased from 80\n  const cardSpacing = 20; // Increased spacing between cards\n  const headerHeight = 60;\n  const svgWidth = totalColumns * columnWidth;\n  const maxCardsInColumn = Math.max(...semesterData.map(([, courses]) => courses.length));\n  const svgHeight = headerHeight + maxCardsInColumn * (cardHeight + cardSpacing) + 100;\n  const getCoursePosition = (columnIndex, cardIndex) => {\n    const x = columnIndex * columnWidth + columnWidth / 2;\n    const y = headerHeight + cardIndex * (cardHeight + cardSpacing) + cardHeight / 2;\n    return {\n      x,\n      y\n    };\n  };\n  const getCourseById = id => {\n    return courses.find(course => course.id === id);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full h-full overflow-auto\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      width: svgWidth,\n      height: svgHeight,\n      className: \"w-full h-full\",\n      children: [semesterData.map(([semesterName, semesterCourses], columnIndex) => /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n          x: columnIndex * columnWidth + 10,\n          y: 10,\n          width: columnWidth - 20,\n          height: headerHeight - 20,\n          fill: \"#f8fafc\",\n          stroke: \"#1e293b\",\n          strokeWidth: \"2\",\n          rx: \"8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          x: columnIndex * columnWidth + columnWidth / 2,\n          y: headerHeight / 2 + 5,\n          textAnchor: \"middle\",\n          className: \"text-sm font-bold fill-gray-800\",\n          fontSize: \"14\",\n          children: semesterName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)]\n      }, semesterName, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)), semesterData.map(([semesterName, semesterCourses], columnIndex) => semesterCourses.map((course, cardIndex) => {\n        const {\n          x,\n          y\n        } = getCoursePosition(columnIndex, cardIndex);\n        const isHovered = (hoveredCourse === null || hoveredCourse === void 0 ? void 0 : hoveredCourse.id) === course.id;\n        const isRelated = connections.some(conn => conn.from === course.id || conn.to === course.id);\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          children: [/*#__PURE__*/_jsxDEV(\"rect\", {\n            x: x - columnWidth / 2 + 20,\n            y: y - cardHeight / 2,\n            width: columnWidth - 40,\n            height: cardHeight,\n            fill: isHovered ? \"#3b82f6\" : isRelated ? \"#dbeafe\" : \"#ffffff\",\n            stroke: isHovered ? \"#1d4ed8\" : \"#1e293b\",\n            strokeWidth: isHovered ? \"3\" : \"2\",\n            rx: \"12\",\n            className: \"cursor-pointer transition-all duration-200\",\n            onMouseEnter: () => setHoveredCourse(course),\n            onMouseLeave: () => setHoveredCourse(null),\n            onClick: () => onCourseClick(course)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            x: x,\n            y: y - 25,\n            textAnchor: \"middle\",\n            className: \"font-bold fill-gray-900\",\n            fontSize: \"16\",\n            children: course.code\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n            x: x - columnWidth / 2 + 30,\n            y: y - 15,\n            width: columnWidth - 60,\n            height: cardHeight - 30,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-xs text-gray-700 leading-tight text-center font-medium\",\n              children: course.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            x: x,\n            y: y + 35,\n            textAnchor: \"middle\",\n            className: \"font-semibold fill-gray-600\",\n            fontSize: \"12\",\n            children: [course.units, \" units\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 17\n          }, this)]\n        }, course.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }, this);\n      })), connections.map((connection, index) => {\n        const fromCourse = getCourseById(connection.from);\n        const toCourse = getCourseById(connection.to);\n        if (!fromCourse || !toCourse) return null;\n        const fromColumnIndex = semesterData.findIndex(([, courses]) => courses.some(c => c.id === connection.from));\n        const toColumnIndex = semesterData.findIndex(([, courses]) => courses.some(c => c.id === connection.to));\n        const fromCardIndex = semesterData[fromColumnIndex][1].findIndex(c => c.id === connection.from);\n        const toCardIndex = semesterData[toColumnIndex][1].findIndex(c => c.id === connection.to);\n        const fromPos = getCoursePosition(fromColumnIndex, fromCardIndex);\n        const toPos = getCoursePosition(toColumnIndex, toCardIndex);\n\n        // Adjust arrow start and end to avoid overlapping with course cards\n        const arrowStartX = fromPos.x + (fromColumnIndex < toColumnIndex ? columnWidth / 2 - 20 : -columnWidth / 2 + 20);\n        const arrowEndX = toPos.x + (toColumnIndex > fromColumnIndex ? -columnWidth / 2 + 20 : columnWidth / 2 - 20);\n        const isPrerequisite = connection.type === 'prerequisite';\n        const strokeColor = isPrerequisite ? '#ef4444' : '#3b82f6';\n        const strokeDasharray = isPrerequisite ? 'none' : '5,5';\n        const strokeWidth = '3';\n        return /*#__PURE__*/_jsxDEV(\"g\", {\n          children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n            children: /*#__PURE__*/_jsxDEV(\"marker\", {\n              id: `arrowhead-${index}`,\n              markerWidth: \"10\",\n              markerHeight: \"7\",\n              refX: \"9\",\n              refY: \"3.5\",\n              orient: \"auto\",\n              children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n                points: \"0 0, 10 3.5, 0 7\",\n                fill: strokeColor\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n            x1: arrowStartX,\n            y1: fromPos.y,\n            x2: arrowEndX,\n            y2: toPos.y,\n            stroke: strokeColor,\n            strokeWidth: strokeWidth,\n            strokeDasharray: strokeDasharray,\n            markerEnd: `url(#arrowhead-${index})`,\n            className: \"transition-all duration-300\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, this)]\n        }, `${connection.from}-${connection.to}-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(Flowchart, \"JsdfNKZQ8oyt2fBuok1DdGdjHug=\");\n_c = Flowchart;\nexport default Flowchart;\nvar _c;\n$RefreshReg$(_c, \"Flowchart\");","map":{"version":3,"names":["React","useRef","useEffect","useState","courses","getPrerequisites","getCorequisites","jsxDEV","_jsxDEV","Flowchart","selectedCourse","onCourseClick","_s","svgRef","hoveredCourse","setHoveredCourse","connections","setConnections","newConnections","prereqs","forEach","prereq","push","from","id","to","type","coreqs","coreq","getCoursesByYearAndSemester","organized","course","key","year","semester","Object","entries","sort","a","b","yearA","parseInt","split","yearB","includes","semesterData","totalColumns","length","columnWidth","cardHeight","cardSpacing","headerHeight","svgWidth","maxCardsInColumn","Math","max","map","svgHeight","getCoursePosition","columnIndex","cardIndex","x","y","getCourseById","find","className","children","ref","width","height","semesterName","semesterCourses","fill","stroke","strokeWidth","rx","fileName","_jsxFileName","lineNumber","columnNumber","textAnchor","fontSize","isHovered","isRelated","some","conn","onMouseEnter","onMouseLeave","onClick","code","name","units","connection","index","fromCourse","toCourse","fromColumnIndex","findIndex","c","toColumnIndex","fromCardIndex","toCardIndex","fromPos","toPos","arrowStartX","arrowEndX","isPrerequisite","strokeColor","strokeDasharray","markerWidth","markerHeight","refX","refY","orient","points","x1","y1","x2","y2","markerEnd","_c","$RefreshReg$"],"sources":["C:/flowchart/src/components/Flowchart.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { courses, Course, getPrerequisites, getCorequisites } from '../data/courses.ts';\n\ninterface FlowchartProps {\n  selectedCourse: Course | null;\n  onCourseClick: (course: Course) => void;\n}\n\ninterface Connection {\n  from: string;\n  to: string;\n  type: 'prerequisite' | 'corequisite';\n}\n\nconst Flowchart: React.FC<FlowchartProps> = ({ selectedCourse, onCourseClick }) => {\n  const svgRef = useRef<SVGSVGElement>(null);\n  const [hoveredCourse, setHoveredCourse] = useState<Course | null>(null);\n  const [connections, setConnections] = useState<Connection[]>([]);\n\n  // Generate connections for the hovered course\n  useEffect(() => {\n    if (!hoveredCourse) {\n      setConnections([]);\n      return;\n    }\n\n    const newConnections: Connection[] = [];\n    \n    // Add prerequisite connections\n    const prereqs = getPrerequisites(hoveredCourse);\n    prereqs.forEach(prereq => {\n      newConnections.push({\n        from: prereq.id,\n        to: hoveredCourse.id,\n        type: 'prerequisite'\n      });\n    });\n\n    // Add corequisite connections\n    const coreqs = getCorequisites(hoveredCourse);\n    coreqs.forEach(coreq => {\n      newConnections.push({\n        from: coreq.id,\n        to: hoveredCourse.id,\n        type: 'corequisite'\n      });\n    });\n\n    setConnections(newConnections);\n  }, [hoveredCourse]);\n\n  // Get all courses organized by year and semester\n  const getCoursesByYearAndSemester = () => {\n    const organized: { [key: string]: Course[] } = {};\n    \n    courses.forEach(course => {\n      const key = `Year ${course.year} ${course.semester}`;\n      if (!organized[key]) {\n        organized[key] = [];\n      }\n      organized[key].push(course);\n    });\n\n    // Sort by year and semester\n    return Object.entries(organized).sort(([a], [b]) => {\n      const yearA = parseInt(a.split(' ')[1]);\n      const yearB = parseInt(b.split(' ')[1]);\n      if (yearA !== yearB) return yearA - yearB;\n      return a.includes('Fall') ? -1 : 1;\n    });\n  };\n\n  const semesterData = getCoursesByYearAndSemester();\n  const totalColumns = semesterData.length;\n  const columnWidth = 280; // Increased from 200\n  const cardHeight = 120; // Increased from 80\n  const cardSpacing = 20; // Increased spacing between cards\n  const headerHeight = 60;\n  const svgWidth = totalColumns * columnWidth;\n  const maxCardsInColumn = Math.max(...semesterData.map(([, courses]) => courses.length));\n  const svgHeight = headerHeight + (maxCardsInColumn * (cardHeight + cardSpacing)) + 100;\n\n  const getCoursePosition = (columnIndex: number, cardIndex: number) => {\n    const x = columnIndex * columnWidth + columnWidth / 2;\n    const y = headerHeight + cardIndex * (cardHeight + cardSpacing) + cardHeight / 2;\n    return { x, y };\n  };\n\n  const getCourseById = (id: string) => {\n    return courses.find(course => course.id === id);\n  };\n\n  return (\n    <div className=\"w-full h-full overflow-auto\">\n      <svg\n        ref={svgRef}\n        width={svgWidth}\n        height={svgHeight}\n        className=\"w-full h-full\"\n      >\n        {/* Semester Headers */}\n        {semesterData.map(([semesterName, semesterCourses], columnIndex) => (\n          <g key={semesterName}>\n            <rect\n              x={columnIndex * columnWidth + 10}\n              y={10}\n              width={columnWidth - 20}\n              height={headerHeight - 20}\n              fill=\"#f8fafc\"\n              stroke=\"#1e293b\"\n              strokeWidth=\"2\"\n              rx=\"8\"\n            />\n            <text\n              x={columnIndex * columnWidth + columnWidth / 2}\n              y={headerHeight / 2 + 5}\n              textAnchor=\"middle\"\n              className=\"text-sm font-bold fill-gray-800\"\n              fontSize=\"14\"\n            >\n              {semesterName}\n            </text>\n          </g>\n        ))}\n\n        {/* Course Cards */}\n        {semesterData.map(([semesterName, semesterCourses], columnIndex) =>\n          semesterCourses.map((course, cardIndex) => {\n            const { x, y } = getCoursePosition(columnIndex, cardIndex);\n            const isHovered = hoveredCourse?.id === course.id;\n            const isRelated = connections.some(conn => \n              conn.from === course.id || conn.to === course.id\n            );\n\n            return (\n              <g key={course.id}>\n                {/* Course Card Background */}\n                <rect\n                  x={x - columnWidth / 2 + 20}\n                  y={y - cardHeight / 2}\n                  width={columnWidth - 40}\n                  height={cardHeight}\n                  fill={isHovered ? \"#3b82f6\" : isRelated ? \"#dbeafe\" : \"#ffffff\"}\n                  stroke={isHovered ? \"#1d4ed8\" : \"#1e293b\"}\n                  strokeWidth={isHovered ? \"3\" : \"2\"}\n                  rx=\"12\"\n                  className=\"cursor-pointer transition-all duration-200\"\n                  onMouseEnter={() => setHoveredCourse(course)}\n                  onMouseLeave={() => setHoveredCourse(null)}\n                  onClick={() => onCourseClick(course)}\n                />\n\n                {/* Course Code */}\n                <text\n                  x={x}\n                  y={y - 25}\n                  textAnchor=\"middle\"\n                  className=\"font-bold fill-gray-900\"\n                  fontSize=\"16\"\n                >\n                  {course.code}\n                </text>\n\n                {/* Course Name - Multi-line with proper wrapping */}\n                <foreignObject\n                  x={x - columnWidth / 2 + 30}\n                  y={y - 15}\n                  width={columnWidth - 60}\n                  height={cardHeight - 30}\n                >\n                  <div className=\"text-xs text-gray-700 leading-tight text-center font-medium\">\n                    {course.name}\n                  </div>\n                </foreignObject>\n\n                {/* Units */}\n                <text\n                  x={x}\n                  y={y + 35}\n                  textAnchor=\"middle\"\n                  className=\"font-semibold fill-gray-600\"\n                  fontSize=\"12\"\n                >\n                  {course.units} units\n                </text>\n              </g>\n            );\n          })\n        )}\n\n        {/* Connection Arrows */}\n        {connections.map((connection, index) => {\n          const fromCourse = getCourseById(connection.from);\n          const toCourse = getCourseById(connection.to);\n          \n          if (!fromCourse || !toCourse) return null;\n\n          const fromColumnIndex = semesterData.findIndex(([, courses]) => \n            courses.some(c => c.id === connection.from)\n          );\n          const toColumnIndex = semesterData.findIndex(([, courses]) => \n            courses.some(c => c.id === connection.to)\n          );\n          \n          const fromCardIndex = semesterData[fromColumnIndex][1].findIndex(c => c.id === connection.from);\n          const toCardIndex = semesterData[toColumnIndex][1].findIndex(c => c.id === connection.to);\n\n          const fromPos = getCoursePosition(fromColumnIndex, fromCardIndex);\n          const toPos = getCoursePosition(toColumnIndex, toCardIndex);\n\n          // Adjust arrow start and end to avoid overlapping with course cards\n          const arrowStartX = fromPos.x + (fromColumnIndex < toColumnIndex ? columnWidth / 2 - 20 : -columnWidth / 2 + 20);\n          const arrowEndX = toPos.x + (toColumnIndex > fromColumnIndex ? -columnWidth / 2 + 20 : columnWidth / 2 - 20);\n\n          const isPrerequisite = connection.type === 'prerequisite';\n          const strokeColor = isPrerequisite ? '#ef4444' : '#3b82f6';\n          const strokeDasharray = isPrerequisite ? 'none' : '5,5';\n          const strokeWidth = '3';\n\n          return (\n            <g key={`${connection.from}-${connection.to}-${index}`}>\n              <defs>\n                <marker\n                  id={`arrowhead-${index}`}\n                  markerWidth=\"10\"\n                  markerHeight=\"7\"\n                  refX=\"9\"\n                  refY=\"3.5\"\n                  orient=\"auto\"\n                >\n                  <polygon\n                    points=\"0 0, 10 3.5, 0 7\"\n                    fill={strokeColor}\n                  />\n                </marker>\n              </defs>\n              \n              <line\n                x1={arrowStartX}\n                y1={fromPos.y}\n                x2={arrowEndX}\n                y2={toPos.y}\n                stroke={strokeColor}\n                strokeWidth={strokeWidth}\n                strokeDasharray={strokeDasharray}\n                markerEnd={`url(#arrowhead-${index})`}\n                className=\"transition-all duration-300\"\n              />\n            </g>\n          );\n        })}\n      </svg>\n    </div>\n  );\n};\n\nexport default Flowchart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE1D,SAASC,OAAO,EAAUC,gBAAgB,EAAEC,eAAe,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAaxF,MAAMC,SAAmC,GAAGA,CAAC;EAAEC,cAAc;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACjF,MAAMC,MAAM,GAAGZ,MAAM,CAAgB,IAAI,CAAC;EAC1C,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAgB,IAAI,CAAC;EACvE,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAe,EAAE,CAAC;;EAEhE;EACAD,SAAS,CAAC,MAAM;IACd,IAAI,CAACY,aAAa,EAAE;MAClBG,cAAc,CAAC,EAAE,CAAC;MAClB;IACF;IAEA,MAAMC,cAA4B,GAAG,EAAE;;IAEvC;IACA,MAAMC,OAAO,GAAGd,gBAAgB,CAACS,aAAa,CAAC;IAC/CK,OAAO,CAACC,OAAO,CAACC,MAAM,IAAI;MACxBH,cAAc,CAACI,IAAI,CAAC;QAClBC,IAAI,EAAEF,MAAM,CAACG,EAAE;QACfC,EAAE,EAAEX,aAAa,CAACU,EAAE;QACpBE,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA,MAAMC,MAAM,GAAGrB,eAAe,CAACQ,aAAa,CAAC;IAC7Ca,MAAM,CAACP,OAAO,CAACQ,KAAK,IAAI;MACtBV,cAAc,CAACI,IAAI,CAAC;QAClBC,IAAI,EAAEK,KAAK,CAACJ,EAAE;QACdC,EAAE,EAAEX,aAAa,CAACU,EAAE;QACpBE,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFT,cAAc,CAACC,cAAc,CAAC;EAChC,CAAC,EAAE,CAACJ,aAAa,CAAC,CAAC;;EAEnB;EACA,MAAMe,2BAA2B,GAAGA,CAAA,KAAM;IACxC,MAAMC,SAAsC,GAAG,CAAC,CAAC;IAEjD1B,OAAO,CAACgB,OAAO,CAACW,MAAM,IAAI;MACxB,MAAMC,GAAG,GAAG,QAAQD,MAAM,CAACE,IAAI,IAAIF,MAAM,CAACG,QAAQ,EAAE;MACpD,IAAI,CAACJ,SAAS,CAACE,GAAG,CAAC,EAAE;QACnBF,SAAS,CAACE,GAAG,CAAC,GAAG,EAAE;MACrB;MACAF,SAAS,CAACE,GAAG,CAAC,CAACV,IAAI,CAACS,MAAM,CAAC;IAC7B,CAAC,CAAC;;IAEF;IACA,OAAOI,MAAM,CAACC,OAAO,CAACN,SAAS,CAAC,CAACO,IAAI,CAAC,CAAC,CAACC,CAAC,CAAC,EAAE,CAACC,CAAC,CAAC,KAAK;MAClD,MAAMC,KAAK,GAAGC,QAAQ,CAACH,CAAC,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACvC,MAAMC,KAAK,GAAGF,QAAQ,CAACF,CAAC,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACvC,IAAIF,KAAK,KAAKG,KAAK,EAAE,OAAOH,KAAK,GAAGG,KAAK;MACzC,OAAOL,CAAC,CAACM,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IACpC,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,YAAY,GAAGhB,2BAA2B,CAAC,CAAC;EAClD,MAAMiB,YAAY,GAAGD,YAAY,CAACE,MAAM;EACxC,MAAMC,WAAW,GAAG,GAAG,CAAC,CAAC;EACzB,MAAMC,UAAU,GAAG,GAAG,CAAC,CAAC;EACxB,MAAMC,WAAW,GAAG,EAAE,CAAC,CAAC;EACxB,MAAMC,YAAY,GAAG,EAAE;EACvB,MAAMC,QAAQ,GAAGN,YAAY,GAAGE,WAAW;EAC3C,MAAMK,gBAAgB,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGV,YAAY,CAACW,GAAG,CAAC,CAAC,GAAGpD,OAAO,CAAC,KAAKA,OAAO,CAAC2C,MAAM,CAAC,CAAC;EACvF,MAAMU,SAAS,GAAGN,YAAY,GAAIE,gBAAgB,IAAIJ,UAAU,GAAGC,WAAW,CAAE,GAAG,GAAG;EAEtF,MAAMQ,iBAAiB,GAAGA,CAACC,WAAmB,EAAEC,SAAiB,KAAK;IACpE,MAAMC,CAAC,GAAGF,WAAW,GAAGX,WAAW,GAAGA,WAAW,GAAG,CAAC;IACrD,MAAMc,CAAC,GAAGX,YAAY,GAAGS,SAAS,IAAIX,UAAU,GAAGC,WAAW,CAAC,GAAGD,UAAU,GAAG,CAAC;IAChF,OAAO;MAAEY,CAAC;MAAEC;IAAE,CAAC;EACjB,CAAC;EAED,MAAMC,aAAa,GAAIvC,EAAU,IAAK;IACpC,OAAOpB,OAAO,CAAC4D,IAAI,CAACjC,MAAM,IAAIA,MAAM,CAACP,EAAE,KAAKA,EAAE,CAAC;EACjD,CAAC;EAED,oBACEhB,OAAA;IAAKyD,SAAS,EAAC,6BAA6B;IAAAC,QAAA,eAC1C1D,OAAA;MACE2D,GAAG,EAAEtD,MAAO;MACZuD,KAAK,EAAEhB,QAAS;MAChBiB,MAAM,EAAEZ,SAAU;MAClBQ,SAAS,EAAC,eAAe;MAAAC,QAAA,GAGxBrB,YAAY,CAACW,GAAG,CAAC,CAAC,CAACc,YAAY,EAAEC,eAAe,CAAC,EAAEZ,WAAW,kBAC7DnD,OAAA;QAAA0D,QAAA,gBACE1D,OAAA;UACEqD,CAAC,EAAEF,WAAW,GAAGX,WAAW,GAAG,EAAG;UAClCc,CAAC,EAAE,EAAG;UACNM,KAAK,EAAEpB,WAAW,GAAG,EAAG;UACxBqB,MAAM,EAAElB,YAAY,GAAG,EAAG;UAC1BqB,IAAI,EAAC,SAAS;UACdC,MAAM,EAAC,SAAS;UAChBC,WAAW,EAAC,GAAG;UACfC,EAAE,EAAC;QAAG;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP,CAAC,eACFvE,OAAA;UACEqD,CAAC,EAAEF,WAAW,GAAGX,WAAW,GAAGA,WAAW,GAAG,CAAE;UAC/Cc,CAAC,EAAEX,YAAY,GAAG,CAAC,GAAG,CAAE;UACxB6B,UAAU,EAAC,QAAQ;UACnBf,SAAS,EAAC,iCAAiC;UAC3CgB,QAAQ,EAAC,IAAI;UAAAf,QAAA,EAEZI;QAAY;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA,GAnBDT,YAAY;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAoBjB,CACJ,CAAC,EAGDlC,YAAY,CAACW,GAAG,CAAC,CAAC,CAACc,YAAY,EAAEC,eAAe,CAAC,EAAEZ,WAAW,KAC7DY,eAAe,CAACf,GAAG,CAAC,CAACzB,MAAM,EAAE6B,SAAS,KAAK;QACzC,MAAM;UAAEC,CAAC;UAAEC;QAAE,CAAC,GAAGJ,iBAAiB,CAACC,WAAW,EAAEC,SAAS,CAAC;QAC1D,MAAMsB,SAAS,GAAG,CAAApE,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEU,EAAE,MAAKO,MAAM,CAACP,EAAE;QACjD,MAAM2D,SAAS,GAAGnE,WAAW,CAACoE,IAAI,CAACC,IAAI,IACrCA,IAAI,CAAC9D,IAAI,KAAKQ,MAAM,CAACP,EAAE,IAAI6D,IAAI,CAAC5D,EAAE,KAAKM,MAAM,CAACP,EAChD,CAAC;QAED,oBACEhB,OAAA;UAAA0D,QAAA,gBAEE1D,OAAA;YACEqD,CAAC,EAAEA,CAAC,GAAGb,WAAW,GAAG,CAAC,GAAG,EAAG;YAC5Bc,CAAC,EAAEA,CAAC,GAAGb,UAAU,GAAG,CAAE;YACtBmB,KAAK,EAAEpB,WAAW,GAAG,EAAG;YACxBqB,MAAM,EAAEpB,UAAW;YACnBuB,IAAI,EAAEU,SAAS,GAAG,SAAS,GAAGC,SAAS,GAAG,SAAS,GAAG,SAAU;YAChEV,MAAM,EAAES,SAAS,GAAG,SAAS,GAAG,SAAU;YAC1CR,WAAW,EAAEQ,SAAS,GAAG,GAAG,GAAG,GAAI;YACnCP,EAAE,EAAC,IAAI;YACPV,SAAS,EAAC,4CAA4C;YACtDqB,YAAY,EAAEA,CAAA,KAAMvE,gBAAgB,CAACgB,MAAM,CAAE;YAC7CwD,YAAY,EAAEA,CAAA,KAAMxE,gBAAgB,CAAC,IAAI,CAAE;YAC3CyE,OAAO,EAAEA,CAAA,KAAM7E,aAAa,CAACoB,MAAM;UAAE;YAAA6C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtC,CAAC,eAGFvE,OAAA;YACEqD,CAAC,EAAEA,CAAE;YACLC,CAAC,EAAEA,CAAC,GAAG,EAAG;YACVkB,UAAU,EAAC,QAAQ;YACnBf,SAAS,EAAC,yBAAyB;YACnCgB,QAAQ,EAAC,IAAI;YAAAf,QAAA,EAEZnC,MAAM,CAAC0D;UAAI;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACR,CAAC,eAGPvE,OAAA;YACEqD,CAAC,EAAEA,CAAC,GAAGb,WAAW,GAAG,CAAC,GAAG,EAAG;YAC5Bc,CAAC,EAAEA,CAAC,GAAG,EAAG;YACVM,KAAK,EAAEpB,WAAW,GAAG,EAAG;YACxBqB,MAAM,EAAEpB,UAAU,GAAG,EAAG;YAAAiB,QAAA,eAExB1D,OAAA;cAAKyD,SAAS,EAAC,6DAA6D;cAAAC,QAAA,EACzEnC,MAAM,CAAC2D;YAAI;cAAAd,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACT;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACO,CAAC,eAGhBvE,OAAA;YACEqD,CAAC,EAAEA,CAAE;YACLC,CAAC,EAAEA,CAAC,GAAG,EAAG;YACVkB,UAAU,EAAC,QAAQ;YACnBf,SAAS,EAAC,6BAA6B;YACvCgB,QAAQ,EAAC,IAAI;YAAAf,QAAA,GAEZnC,MAAM,CAAC4D,KAAK,EAAC,QAChB;UAAA;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA,GAjDDhD,MAAM,CAACP,EAAE;UAAAoD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAkDd,CAAC;MAER,CAAC,CACH,CAAC,EAGA/D,WAAW,CAACwC,GAAG,CAAC,CAACoC,UAAU,EAAEC,KAAK,KAAK;QACtC,MAAMC,UAAU,GAAG/B,aAAa,CAAC6B,UAAU,CAACrE,IAAI,CAAC;QACjD,MAAMwE,QAAQ,GAAGhC,aAAa,CAAC6B,UAAU,CAACnE,EAAE,CAAC;QAE7C,IAAI,CAACqE,UAAU,IAAI,CAACC,QAAQ,EAAE,OAAO,IAAI;QAEzC,MAAMC,eAAe,GAAGnD,YAAY,CAACoD,SAAS,CAAC,CAAC,GAAG7F,OAAO,CAAC,KACzDA,OAAO,CAACgF,IAAI,CAACc,CAAC,IAAIA,CAAC,CAAC1E,EAAE,KAAKoE,UAAU,CAACrE,IAAI,CAC5C,CAAC;QACD,MAAM4E,aAAa,GAAGtD,YAAY,CAACoD,SAAS,CAAC,CAAC,GAAG7F,OAAO,CAAC,KACvDA,OAAO,CAACgF,IAAI,CAACc,CAAC,IAAIA,CAAC,CAAC1E,EAAE,KAAKoE,UAAU,CAACnE,EAAE,CAC1C,CAAC;QAED,MAAM2E,aAAa,GAAGvD,YAAY,CAACmD,eAAe,CAAC,CAAC,CAAC,CAAC,CAACC,SAAS,CAACC,CAAC,IAAIA,CAAC,CAAC1E,EAAE,KAAKoE,UAAU,CAACrE,IAAI,CAAC;QAC/F,MAAM8E,WAAW,GAAGxD,YAAY,CAACsD,aAAa,CAAC,CAAC,CAAC,CAAC,CAACF,SAAS,CAACC,CAAC,IAAIA,CAAC,CAAC1E,EAAE,KAAKoE,UAAU,CAACnE,EAAE,CAAC;QAEzF,MAAM6E,OAAO,GAAG5C,iBAAiB,CAACsC,eAAe,EAAEI,aAAa,CAAC;QACjE,MAAMG,KAAK,GAAG7C,iBAAiB,CAACyC,aAAa,EAAEE,WAAW,CAAC;;QAE3D;QACA,MAAMG,WAAW,GAAGF,OAAO,CAACzC,CAAC,IAAImC,eAAe,GAAGG,aAAa,GAAGnD,WAAW,GAAG,CAAC,GAAG,EAAE,GAAG,CAACA,WAAW,GAAG,CAAC,GAAG,EAAE,CAAC;QAChH,MAAMyD,SAAS,GAAGF,KAAK,CAAC1C,CAAC,IAAIsC,aAAa,GAAGH,eAAe,GAAG,CAAChD,WAAW,GAAG,CAAC,GAAG,EAAE,GAAGA,WAAW,GAAG,CAAC,GAAG,EAAE,CAAC;QAE5G,MAAM0D,cAAc,GAAGd,UAAU,CAAClE,IAAI,KAAK,cAAc;QACzD,MAAMiF,WAAW,GAAGD,cAAc,GAAG,SAAS,GAAG,SAAS;QAC1D,MAAME,eAAe,GAAGF,cAAc,GAAG,MAAM,GAAG,KAAK;QACvD,MAAMhC,WAAW,GAAG,GAAG;QAEvB,oBACElE,OAAA;UAAA0D,QAAA,gBACE1D,OAAA;YAAA0D,QAAA,eACE1D,OAAA;cACEgB,EAAE,EAAE,aAAaqE,KAAK,EAAG;cACzBgB,WAAW,EAAC,IAAI;cAChBC,YAAY,EAAC,GAAG;cAChBC,IAAI,EAAC,GAAG;cACRC,IAAI,EAAC,KAAK;cACVC,MAAM,EAAC,MAAM;cAAA/C,QAAA,eAEb1D,OAAA;gBACE0G,MAAM,EAAC,kBAAkB;gBACzB1C,IAAI,EAAEmC;cAAY;gBAAA/B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnB;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACI;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC,eAEPvE,OAAA;YACE2G,EAAE,EAAEX,WAAY;YAChBY,EAAE,EAAEd,OAAO,CAACxC,CAAE;YACduD,EAAE,EAAEZ,SAAU;YACda,EAAE,EAAEf,KAAK,CAACzC,CAAE;YACZW,MAAM,EAAEkC,WAAY;YACpBjC,WAAW,EAAEA,WAAY;YACzBkC,eAAe,EAAEA,eAAgB;YACjCW,SAAS,EAAE,kBAAkB1B,KAAK,GAAI;YACtC5B,SAAS,EAAC;UAA6B;YAAAW,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACxC,CAAC;QAAA,GA3BI,GAAGa,UAAU,CAACrE,IAAI,IAAIqE,UAAU,CAACnE,EAAE,IAAIoE,KAAK,EAAE;UAAAjB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OA4BnD,CAAC;MAER,CAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACnE,EAAA,CAhPIH,SAAmC;AAAA+G,EAAA,GAAnC/G,SAAmC;AAkPzC,eAAeA,SAAS;AAAC,IAAA+G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}